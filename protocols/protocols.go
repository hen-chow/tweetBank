// Code generated by go-bindata.
// sources:
// .protocols/Tweets.proto
// DO NOT EDIT!

package protocols

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data, name string) ([]byte, error) {
	gz, err := gzip.NewReader(strings.NewReader(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _tweetsProto = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x91\x41\x4b\xc3\x40\x10\x85\xef\xf3\x2b\x1e\x3d\xe6\x52\x6c\x6b\x55\x42\x0e\x45\x50\x04\xf1\x20\xde\x65\x49\xc6\x34\x98\xee\xc4\x9d\x59\xdb\x52\xfa\xdf\x65\xd3\xa6\x84\xde\xbc\xbe\x6f\xdf\x7b\xec\x1b\xdd\x7b\x73\x3b\x14\x98\x74\x41\x4c\xe6\x93\x9c\x3a\x57\x7e\xbb\x9a\xf1\xb1\x65\x36\xcd\x89\xa4\xb3\x46\x3c\x6a\xf9\x1c\xd0\xf0\xbc\x94\x76\x92\x13\x6d\x58\xf5\xe2\xc0\x81\x80\xc6\xdb\x72\x01\xc0\x92\xf2\x52\xa1\xc0\x4d\x4e\x80\x5a\x68\x7c\x0d\x18\xef\x0c\x05\x66\x63\xad\x0c\xec\x8c\xab\x55\x02\xf3\xfc\x94\x31\x9f\x01\xf8\x72\xbf\x12\x1a\xe3\x47\x89\x3e\xc1\xc5\x18\x06\xee\x2b\x06\x76\x3b\x4e\x6c\x9d\xaf\x51\x60\x39\xd6\xa2\x72\x78\x73\x9b\xf4\x85\xbb\x6b\xfd\x55\x4a\xd7\xff\xb4\xc0\xfd\xb8\x23\xb1\x27\x69\x5b\xd9\x72\xd0\xa1\xe9\x21\xa7\x23\xd1\x34\xcb\x08\x19\x56\x78\xe7\x9f\xc8\x6a\xb0\xb5\x33\xec\x25\x42\xd7\x12\xdb\x0a\x95\x94\x71\xc3\xde\x08\xd9\xf4\xb2\xd3\x33\x5b\x3f\xd5\x60\x3a\x5c\x45\x69\x27\x5e\xf9\xbf\x59\x67\x57\x9a\x3f\x70\xd7\x8f\x79\xbe\x48\x3f\x91\x9e\x8e\x70\xa4\xbf\x00\x00\x00\xff\xff\x04\x75\xb5\x85\xf3\x01\x00\x00"

func tweetsProtoBytes() ([]byte, error) {
	return bindataRead(
		_tweetsProto,
		"Tweets.proto",
	)
}

func tweetsProto() (*asset, error) {
	bytes, err := tweetsProtoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "Tweets.proto", size: 499, mode: os.FileMode(420), modTime: time.Unix(1516766483, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"Tweets.proto": tweetsProto,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"Tweets.proto": {tweetsProto, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
