// Code generated by 'banks apply'; DO NOT EDIT.

package Tweets

import (
	"context"
	"fmt"

	"github.com/autopilothq/lg"

	"github.com/autopilothq/banks/contract"
	ct "github.com/autopilothq/banks/contract/types"
	bp "github.com/autopilothq/banks/protocol"
	"github.com/autopilothq/banks/util"

	dep1 "github.com/hen-chow/tweetBank/resources/Tweets/Legacy"
	dep0 "github.com/hen-chow/tweetBank/resources/Tweets/protocol"
)

const (
	resourceID = 1

	msgIDGetTweet = 65537

	spIDLegacy = 1
)

func init() {
	var _ util.Fuse

	contract.StoragePlan(resourceID, spIDLegacy, dep1.SetupDatascope, dep1.TeardownDatascope)

	contract.Request(msgIDGetTweet, &dep0.GetTweetRequest{}, &dep0.GetTweetResponse{},
		func(ctx context.Context, request *bp.Request, log lg.Log, aux ct.Auxiliary) (res *bp.Response) {
			var dispatch func(uint32) *bp.Response
			dispatch = func(step uint32) (res *bp.Response) { // nolint: shadow
				switch step {
				case 0:

					var (
						migrationID uint32
						storageID   uint32
						exists      bool
						err         error
						ready       bool
					)

					ready, err = contract.WaitUntilNullMigrationComplete(ctx, request.DatascopeID, resourceID)
					if err != nil {
						return request.MakeFatalResponse(bp.ResponseCode_ERR_UNKNOWN,
							fmt.Sprintf("Tweets.GetTweet error waiting: %s", err.Error()))
					}
					if !ready {
						return dispatch(0)
					}

					migrationID, exists, err = contract.GetActiveMigrationID(request.DatascopeID, resourceID)
					if err != nil {
						return request.MakeFatalResponse(bp.ResponseCode_ERR_UNKNOWN,
							fmt.Sprintf("Tweets.GetTweet error getting active migration: %s", err.Error()))
					}

					if exists {
						return dispatch(migrationID)
					}

					storageID, exists, err = contract.GetStoragePlanID(request.DatascopeID, resourceID)
					if err != nil {
						return request.MakeFatalResponse(bp.ResponseCode_ERR_UNKNOWN,
							fmt.Sprintf("Tweets.GetTweet error getting current storage plan: %s", err.Error()))
					}
					if exists {
						return dispatch(storageID)
					}

					return request.MakeFatalResponse(bp.ResponseCode_ERR_UNKNOWN,
						"Tweets.GetTweet failed: no storage plan available")

				case spIDLegacy:

					contract.TraceStoragePlanImpl(log, spIDLegacy, "Legacy", msgIDGetTweet, request, res)
					return dep1.GetTweet(request, log, aux)

				default:
					return request.MakeFatalResponse(bp.ResponseCode_ERR_UNKNOWN,
						fmt.Sprintf("Invalid Tweets.GetTweet dispatch step %d", step))
				}
			}

			return dispatch(0)
		})
}
